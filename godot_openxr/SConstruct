#!python
import os, subprocess

# Reads variables from an optional file.
customs = ['../custom.py']
opts = Variables(customs, ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = Environment()

# Define our parameters
opts.Add(EnumVariable('platform', "Platform", 'windows', ['linux', 'osx', 'windows']))
opts.Add(EnumVariable('target', "Compilation target", 'release', ['d', 'debug', 'r', 'release']))
opts.AddVariables(
    PathVariable('target_path', 'The path where the lib is installed.', '../godot-scene/addons/godot-openxr/'),
    PathVariable('target_name', 'The library name.', 'godot_openxr', PathVariable.PathAccept),
)
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))

# Updates the environment with the option variables.
opts.Update(env)

# Paths
godot_glad_path = "glad/"
godot_headers_path = "godot_headers/"
target_path = env['target_path']

openxr_include_path = ""
openxr_library_path = ""

# Source files to include
sources = []




# note, on linux the OpenXR SDK is installed in /usr and should be accessible
if env['use_llvm']:
    env['CXX'] = 'clang++'
    env['CC'] = 'clang'

if env['target'] in ('debug', 'd'):
    env.Append(CCFLAGS = ['-fPIC', '-ggdb','-O0'])
else:
    env.Append(CCFLAGS = ['-fPIC', '-g','-O3'])
env.Append(CXXFLAGS = [ '-std=c++0x' ])
env.Append(LINKFLAGS = [ '-Wl,-R,\'$$ORIGIN\'' ])

####################################################################################################################################
# and add our main project

env.Append(CPPPATH=['.', 'src/', godot_headers_path])

if openxr_include_path != "":
    env.Append(CPPPATH = [ openxr_include_path ])

if openxr_library_path != "":
    env.Append(LIBPATH = [ openxr_library_path ])

env.Append(LIBS=['openxr_loader'])

sources += Glob('src/*.c')
sources += Glob('src/*.cpp')
sources += Glob('src/*/*.c')
sources += Glob('src/*/*.cpp')

library = env.SharedLibrary(target=target_path + env['target_name'], source=sources)
Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
